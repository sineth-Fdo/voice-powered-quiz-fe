name: Deploy Next.js App

on:
  push:
    branches:
      - main
      - development
  pull_request:
    branches:
      - main
      - development

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install pnpm
        run: npm install -g pnpm@9.15.4

      - name: Install dependencies üì¶
        run: pnpm install
      
      - name: Build Next.js app üõ†Ô∏è
        run: NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }} pnpm build

      # Docker hub

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Echo env
        run: echo ${{ secrets.NEXT_PUBLIC_API_URL }}
        
      - name: Build Docker image
        run: docker build --build-arg NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }} -t ${{ secrets.DOCKER_USERNAME }}/voice-powered-quiz-fe:v1.0 .

      - name: Push Docker images
        run: |
          # docker push ${{ secrets.DOCKER_USERNAME }}/voice-powered-quiz-fe:${{ github.sha }}
          docker push ${{ secrets.DOCKER_USERNAME }}/voice-powered-quiz-fe:v1.0
  
  # # Deploy to AWS EC2
  # deploy:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main' 

  #   steps:
  #       - name: Deploy to AWS EC2
  #         uses: appleboy/ssh-action@v0.1.6
  #         with:
  #           host: ${{ secrets.EC2_IP }}
  #           username: ubuntu
  #           key: ${{ secrets.EC2_SSH_KEY }}
  #           port: 22
  #           script: |
  #             echo "Stopping and removing old container..."
  #             CONTAINER_ID=$(docker ps -q --filter "ancestor=${{ secrets.DOCKER_USERNAME }}/voice-powered-quiz-fe:v1.0")
  #             if [ ! -z "$CONTAINER_ID" ]; then
  #               docker stop $CONTAINER_ID
  #               docker rm $CONTAINER_ID
  #             fi
              
  #             echo "Removing old Docker image..."
  #             IMAGE_ID=$(docker images -q ${{ secrets.DOCKER_USERNAME }}/voice-powered-quiz-fe:v1.0)
  #             if [ ! -z "$IMAGE_ID" ]; then
  #               docker rmi -f $IMAGE_ID
  #             fi
              
  #             echo "Pulling new Docker image..."
  #             docker pull ${{ secrets.DOCKER_USERNAME }}/voice-powered-quiz-fe:v1.0
              
  #             echo "Running new container..."
  #             docker run -d -p 3000:3000 --name voice-powered-quiz-fe \
  #               -e NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }} \
  #               ${{ secrets.DOCKER_USERNAME }}/voice-powered-quiz-fe:v1.0
